1) If in the module exit point, we’d forgot to kfree() all of the elements (or part of elements) – what would happen?   How do you prevent this from happening?  How do you fix this?  Show what happens by simulation.  Is this different than user level – why or why not?  
Backup your answer. 

If we forget to kfree the kernel-space memory we obtrained via a call to kmalloc, we will have created a kernal-level memory leak. This means that we will have allocated memory to a kernel module that will typically not be released until after the system is restarted, instead of when the module is unloaded, which is generally a more proper time to release memory. We can prevent this from happening via carefully code-reviewing all code that is written at the kernel-level to try to catch bugs before deployment. Additionally we can run our code thru tools like valgrind to catch memory leaks as well as a number of other issues like double-frees (trying to free the same memory twice). We can fix this by ensuring that all allocated memory is released. We can see the problem via monitoring the output of slabtop after running insmod for a module that allocates 50,000 birthday entry structs but does not free them:

Output of slabtop before inserting module:

Active / Total Objects (% used)    : 419296 / 429130 (97.7%)

Output of slabtop after inserting module:

Active / Total Objects (% used)    : 443937 / 452754 (98.1%)

As can be seen, a large amount of memory has been allocated but never freed. Although a similar problem can happen in user-space, it is different (and more severe) here because most user-space programs eventually exit and the OS can return any memory they allocated - here, however, the kernel keeps running and cannot automatically free this memory. Thus this leak may accumulate until the system needs to be rebooted and abruptly runs out of memory. I can back up these claims via reference to the valgrind dynamic analysis tools at: http://valgrind.org/

2) Why are the kernel data structures “simple” (for example, linked list, hash, b-trees)?  Describe all reasons that you can think of. 

Kernel data structures are "simple" for several reasons:
a) Most have been around for several decades now. Many unnecessary methods have been removed via the "many eyes" principle over time
b) Early linux systems had very limited memory, allowing only for simple data structures that were very performant, in comparison to more elaborate structures that may have been easier to program with, but which would require more memory
c) Any kernal-space bug could crash the system and force a reboot. For this reason there is a strong preference for simplicity. See e.g. Linus's posts on why he prefers the simplicity of C over C++. He writes "the choice of C is the only sane choice" at http://harmful.cat-v.org/software/c++/linus

3) What about the security of kernel modules?  Can they manipulate global structures or are they limited to their own variables?  Suggest what you think the rules are and WHY.  How do you get the names of the kernel’s variables?  

Kernel modules in Linux (a monolithic kernel) have poor security properties. As the module can access memory directly via dereferencing a pointer, a kernel module could manipulate global structures in addition to its own variables. I believe that the kernel is this way per design. Linux has historically put a high premium on performance over security, and omitting these security checks helps improve performance overall.
We can get the names of variables that can be set in the kernel via the sysctl -a command, for example (an excerpt):

vm.overcommit_ratio = 50
vm.page-cluster = 3
vm.panic_on_oom = 0
vm.percpu_pagelist_fraction = 0
vm.scan_unevictable_pages = 0
vm.stat_interval = 1
vm.swappiness = 60

4) What about performance (of both the module and the kernel in general)?  Since these modules are being loaded into the kernel – are they managed in any way? Can they make the kernel perform badly? 

Generally speaking the performance of the module and kernel are quite good - as a monolithic kernel it has been optimized for performance. The fact that modules are loaded allows a type of permissioning very useful on multi-user systems - namely, a user must have sudo permissions to insert a kernel module.

Kernel modules can definitely make a kernel perform badly by mutating internal data structures  and/or requiring excessive amounts of time to execute

5) Do you think that a poorly written driver module could cause the kernel to crash (stop working)?  Why or why not?  How could a kernel stop this from happening?  

A poorly written driver could cause the kernel to crash because it could overwrite internal data structures needed to manage multi-tasking or time, which would immediately interfere with other processes. A kernel could stop this by moving from a monolithic kernel design to micro-kernal where only messages are passed, and data structures cannot be manipulated globally

6) Now let’s consider the approach of kernels which support loadable modules – what are the tradeoffs (think supportability, performance, security, other areas?) between modular kernels (which allow loadable modules) and monolithic kernels (which don’t)?  Describe at least three areas of comparision/contrast. 

It should be noted that an OS such as Linux can have a kernel that is both monolithic and supports modules, however going on generall principles we can say that a modular kernel is more supportable, less performance, but more secure than a fully monolithic kernel. This is because the former can segregate modules to communicate only via message passing, whereas the latter will frequently allow any code to access any part of the kernel-space memory - this improves the security of modular designs relative to monolithic designs. Because monolithic designs share one memory-space, however, and do not need to pass messages, they have improved performance versus modular kernels. Finally, because modular kernels can force modules to communicate via message passing, they reduce the chances that a malicious module will read protectured memory relative to a monolithic kernel which cannot force this. Thus, supportability, performance and security form three areas of contrast.
